
#===================================================================================================================
# Some Important Resources to learn Git
#===================================================================================================================
# Comprehensive Git Manual: https://mirrors.edge.kernel.org/pub/software/scm/git/docs/user-manual.html
# Interactive git tutorial: https://learngitbranching.js.org
# Summarized git workflow: https://blog.osteele.com/2008/05/my-git-workflow

#===================================================================================================================
# Git Important Commands
#===================================================================================================================
git --help
These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone     Clone a repository into a new directory
   init      Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add       Add file contents to the index
   mv        Move or rename a file, a directory, or a symlink
   restore   Restore working tree files
   rm        Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect    Use binary search to find the commit that introduced a bug
   diff      Show changes between commits, commit and working tree, etc
   grep      Print lines matching a pattern
   log       Show commit logs
   show      Show various types of objects
   status    Show the working tree status

grow, mark and tweak your common history
   branch    List, create, or delete branches
   commit    Record changes to the repository
   merge     Join two or more development histories together
   rebase    Reapply commits on top of another base tip
   reset     Reset current HEAD to the specified state
   switch    Switch branches
   tag       Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch     Download objects and refs from another repository
   pull      Fetch from and integrate with another repository or a local branch
   push      Update remote refs along with associated objects


#===================================================================================================================
# Git Init/Config Related
#===================================================================================================================
git init
git remote -v
git remote add origin https://github.com/faijurrahman/freqtrade.git
git config --global user.email "faijur@gmail.com"
git config --global user.name "Faijur Rahman"
git clone https://github.com/faijurrahman/freqtrade.git


#===================================================================================================================
# Git Generic Commands
#===================================================================================================================
 Some Usefull command for git
git status
git diff config.json
git add -f config.json
git commit -m "Adding default config.json"
git pull --rebase
git push

# Make the local modification config.json untracked to avoid accidentally submitting sensitive account infos
git update-index --skip-worktree config.json
git update-index --skip-worktree live_config.json


#===================================================================================================================
# Git add, commit and pull-push Related
#===================================================================================================================
git status
git diff config.json
git add -f config.json
git commit -m "Adding default config.json"
git pull --rebase
git push


#===================================================================================================================
# Git Temporary Change Related
#===================================================================================================================
git stash --help
git stash push/save  # To temporarily store all the modified tracked files
git stash pop        # To restore the most recently stashed files
git stash list       # To list all stashed changesets
git stash drop       # To discard the most recently stashed changeset
git ls-tree HEAD     # To list all the tracked files in current directory


#===================================================================================================================
# Git Log and History Related
#===================================================================================================================
git log --help
git log
git log --graph --decorate --pretty=oneline --abbrev-commit


#===================================================================================================================
# Git Branch Related
#===================================================================================================================
git branch --help
git branch [branch name]       # To create a new branch
git branch -d [branch name]    # To delete a feature branch
git checkout [branch name]     # To switch from one branch to another
git checkout -b [branch name]  # To create a new branch and also switch to it
git merge [branch name]        # To merge the branch to the current branch
git rebase [branch name]       # To merge the branch to the current branch and create linear history


#===================================================================================================================
# Git Rebase Related
#===================================================================================================================
git rebase --help


#===================================================================================================================
# Git Squash Related
#===================================================================================================================


#===================================================================================================================
# Git Cherry-Picking Related
#===================================================================================================================
git cherry-pick --help
git cherry-pick <Commit1> <Commit2> <...>
git rebase -i HEAD~4
